grammar FuzzyLogic;

program : (statement | rule )*;

statement : define_declaration | method_call;


// Declaration
define_declaration : 'define' ID '=' expression;

// Expression
expression : ID | NUMBER | STRING | '[' (expression (',' expression)*)? ']' | '(' expression ')' | '-' expression | 'NOT' expression |  expression '+' expression | expression '-' expression | expression '*' expression | expression '/' expression | class_expression;


// Class Instance
class_expression : ID '(' arguments ')';

//Rule
rule : 'Rule:' condition 'THEN' ID 'is' STRING;

condition : 'IF' condition_expression ( logical_operator condition_expression )*;

condition_expression : ID 'is' STRING | '(' condition ')' | 'NOT' '(' condition ')';

logical_operator : 'and' | 'or';

//Statement
method_call : ID '.' ID '(' arguments ')';

//Arguments
arguments : (ID '=' expression ( ',' ID '=' expression )*)? ;

ID : [a-zA-Z_][a-zA-Z0-9_]* ;
NUMBER : '-'? [0-9]+ ('.' [0-9]+)? ;
STRING : '"' ~[\r\n"]* '"';
WS : [ \t\r\n]+ -> skip ;
COMMENT : '#' .*? '\r'? '\n' -> skip;