# EXAMPLE fuzzy-rules.frule File //
# Probably shouldn't be in javascript notation but in a custom format //
# this is just for a rough idea //

# 1. Define Input Membership Functions
define fnum_particles =  Input(src=num_particles)

fnum_particles.add_linguistic_term(name="low", membership= Step(between=[100,140], transition=[1,0]))
fnum_particles.add_linguistic_term(name="average", membership=  Triangle(center=200, steepness=20))
fnum_particles.add_linguistic_term(name="high", membership= Step(between=[400,1000], transition=[0,1]))

define some_abstract_calculation = parameterA / parameterB
define faverage_distance=  Input(src=some_abstract_calculation)

faverage_distance.add_linguistic_term(name="low")
faverage_distance.add_linguistic_term(name="average")
faverage_distance.add_linguistic_term(name="high")


# 2. Define Output Membership Functions

define fcan_parallelize=  Output(name="parralelizable")

fcan_parallelize.add_linguistic_term(name="little", center=0)
fcan_parallelize.add_linguistic_term(name="moderate")
fcan_parallelize.add_linguistic_term(name="good", center=100)


# 3. Create some Rules based on fuzzy variables

Rule: # general rule
 IF fnum_particles is "high" and faverage_distance is "high" THEN fcan_parallelize is "good"

Rule: # general rule
 IF fnum_particles is "high" and faverage_distance is "high" THEN fcan_parallelize is "good"


faggressiveness.add_output_option(container=[LC, AOS, NWT3_ON], near=42)
suitability_LC_04_AOS_NWT3_ON_.interpret_as_suitability_for(container=[LC04, AOS, NWT3_ON])
fcan_parallelize.add_output_option(container=[AOS], near=0)

